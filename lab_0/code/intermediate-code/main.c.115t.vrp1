
;; Function main (main, funcdef_no=23, decl_uid=3375, cgraph_uid=24, symbol_order=23) (executed once)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

factorial_5 -> { factorial_3 }
Incremental SSA update started at block: 4
Number of blocks in CFG: 6
Number of blocks to update: 3 ( 50%)


Global Exported: i_4 = [irange] int [1, +INF] NONZERO 0x7fffffff
Global Exported: _1 = [irange] long long unsigned int [1, 2147483647] NONZERO 0x7fffffff
Global Exported: i_10 = [irange] int [2, +INF] NONZERO 0x7fffffff
int main ()
{
  int i;
  long long unsigned int factorial;
  int num;
  long long unsigned int _1;
  int num.0_2;

  <bb 2> [local count: 118111600]:
  scanf ("%d", &num);
  goto <bb 4>; [100.00%]

  <bb 3> [local count: 955630225]:
  _1 = (long long unsigned int) i_4;
  factorial_9 = _1 * factorial_3;
  i_10 = i_4 + 1;

  <bb 4> [local count: 1073741824]:
  # factorial_3 = PHI <1(2), factorial_9(3)>
  # i_4 = PHI <1(2), i_10(3)>
  num.0_2 = num;
  if (num.0_2 >= i_4)
    goto <bb 3>; [89.00%]
  else
    goto <bb 5>; [11.00%]

  <bb 5> [local count: 118111600]:
  # factorial_5 = PHI <factorial_3(4)>
  __printf_chk (2, "%llu\n", factorial_5);
  num ={v} {CLOBBER(eol)};
  return 0;

}


